server_uri: bolt://localhost:7687
database: medverse
admin_user: snowj
admin_pass: abcd1234
files:
  # 17-procedureevents-p1.cql
  - url: file:///var/lib/neo4j/import/custom_partitions/procedureevents_eras.csv
    mode: sync
    thread_count: 1
    chunk_size: 5000
    log_step: 20
    cql: |
      WITH $dict.rows as rows UNWIND rows as row
      call {
          with row
          match (pa:Patient {id: toInteger(row.subject_id)})
          with row, pa
          merge (era:ProcedureEra {id:row.linkorderid})
          merge (pa)-[:HAS_PROC_ERA]->(era)
      }
      

  # 17-procedureevents-p2.cql
  - url: file:///var/lib/neo4j/import/mimiciv/2.2/icu/procedureevents.csv
    mode: sync
    thread_count: 1
    chunk_size: 5000
    log_step: 20
    cql: |
      WITH $dict.rows as rows UNWIND rows as row
      match (pa:Patient {id: toInteger(row.subject_id)})
      match (itemRs:RefSet {id:1901})
      match (item:LocalConcept {id:itemRs.code + "|" + row.itemid})

      match (unitRs:RefSet {id:2201})
      match (flagRs:RefSet {id:2401})

      with row, item,
          unitRs.code + "|" + row.valueuom as unit_id,
          flagRs.code + "|" + row.statusdescription as flag_id,
          case when row.loccation is not null and row.location <> '' then flagRs.code + "|" + row.location else "UNDEF|ALL" end as flag2_id,
          datetime({epochseconds:apoc.date.parse(row.starttime, 's', 'yyyy-MM-dd HH:mm:ss')}) - pa.shiftedYears as starttime,
          datetime({epochseconds:apoc.date.parse(row.endtime, 's', 'yyyy-MM-dd HH:mm:ss')}) - pa.shiftedYears as endtime

      match (unit:LocalConcept {id:unit_id})
      match (flag:LocalConcept {id:flag_id})
      match (flag2:LocalConcept {id:flag2_id})
      match (vis:Visit {id:row.hadm_id})

      with row, item, unit, flag, flag2, starttime, endtime, vis
      create (proc:Procedure)
      set proc:Miscellaneous:NUMERIC,
          proc.valueNum = toFloat(row.value),
          proc.valueUnit = unit.value,
          proc.valueFlag = flag.value,
          proc.value2ndFlag = case when flag2.value <> 0 then flag2.value else null end
      create (vis)-[:HAS_PROC]->(proc)
      create (proc)-[:OF_ITEM]->(item)
      merge (startAnc:Anchor {id:row.subject_id + "-" + starttime.epochSeconds})
          on create
          set startAnc.value = starttime

      merge (endAnc:Anchor {id:row.subject_id + "-" + endtime.epochSeconds})
          on create
          set endAnc.value = endtime

      create (proc)-[:STARTED]->(startAnc)
      create (proc)-[:ENDED]->(endAnc)

      with row, proc, starttime
      optional match (era:ProcedureEra {id:row.linkorderid})

      with row, proc, era, starttime
      foreach (ignore in case when era is not null then [1] else [] end |
          create (era)-[:INCLUDES]->(proc)
      )