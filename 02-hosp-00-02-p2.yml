server_uri: bolt://localhost:7687
database: medverse
admin_user: snowj
admin_pass: abcd1234
files:
  # 01-transfers.cql
  - url: file:///var/lib/neo4j/import/custom_partitions/transfers_icu.csv
    mode: sync
    thread_count: 1
    field_separator:
    chunk_size: 5000
    log_step: 40
    cql: |
      WITH $dict.rows as rows UNWIND rows as row
      call {
          with row
          match (pa:Patient {id: toInteger(row.subject_id)})
          with row, pa,
               datetime({epochseconds: apoc.date.parse(row.intime, 's', 'yyyy-MM-dd HH:mm:ss')}) - pa.shiftedYears as intime
      
          foreach (ignore in case when row.careunit is null or row.careunit = '' then [1] else [] end |
              merge (vis:Visit {id: row.hadm_id})
              merge (pa)-[:HAS_VISIT]->(vis)
              create (vis)-[:HAS_STOP]->(stop:Stop {id: row.transfer_id})
              set stop:DCStay:DISCHARGED
              merge (intime_anchor:Anchor {id: row.subject_id + '-' + intime.epochSeconds})
                  on create
                  set intime_anchor.value = datetime({epochseconds: apoc.date.parse(row.intime, 's', 'yyyy-MM-dd HH:mm:ss')}) - pa.shiftedYears
              create (stop)-[:STARTED]->(intime_anchor)
          )
      
          with row, pa
          where row.careunit is not null and row.careunit <> ''
      
          with row, pa,
              datetime({epochseconds: apoc.date.parse(row.intime, 's', 'yyyy-MM-dd HH:mm:ss')}) - pa.shiftedYears as intime,
              datetime({epochseconds: apoc.date.parse(row.outtime, 's', 'yyyy-MM-dd HH:mm:ss')}) - pa.shiftedYears as outtime
          with row, pa, intime, outtime,
              case when row.hadm_id is not null and row.hadm_id <> '' then row.hadm_id else row.subject_id + '-' + intime.epochSeconds
              end as visit_id
      
          merge (vis:Visit {id: visit_id})
              on match
              set vis.newCreated = false
              on create
              set vis.newCreated = true
      
          with row, pa, intime, outtime, vis,
              case when vis.newCreated then "CONTINUE" else "STOP" end as action
          remove vis.newCreated
          with row, pa, intime, outtime, vis
          where action = "CONTINUE" or (row.hadm_id is not null and row.hadm_id <> '')
      
          foreach (ignore in case when row.hadm_id is not null and row.hadm_id <> '' then [1] else [] end |
              set vis:INPATIENT
          )
          foreach (ignore in case when row.careunit = 'Emergency Department' then [1] else [] end |
              set vis:EMERGENCY
          )
      
          merge (pa)-[:HAS_VISIT]->(vis)
      
          with row, vis, intime, outtime,
              case
                  when row.icustay = 'icu-yes' then 'ICUStay'
                  when row.careunit = 'Emergency Department' and row.icustay = "icu-no" then 'ERStay'
                  // when row.careunit = 'Emergency Department Observation' then 'ERStay'
                  when row.icustay = 'icu-no' then 'NormStay'
                  else 'STAY_TYPE_UNKNOWN'
              end as stay_type,
              case
                  when row.eventtype = 'ED' then 'EDED'
                  when row.eventtype = 'admit' then 'ADMITTED'
                  when row.eventtype = 'transfer' then 'TRANSFERRED'
                  when row.eventtype = 'discharge' then 'DISCHARGED'
                  else 'UNKNOWN'
              end as event_type
      
          // create the stop
          create (stop:Stop {id: row.transfer_id})
          create (vis)-[:HAS_STOP]->(stop)
      
          with row, vis, intime, outtime, stop, stay_type, event_type
          call apoc.create.setLabels(stop, ["Stop", stay_type, event_type])
          yield node as ignore
      
          with row, vis, intime, outtime, stop
          // intime and outtime anchors for stop
          merge (intime_anchor:Anchor {id: row.subject_id + '-' + intime.epochSeconds})
              on create
              set intime_anchor.value = intime
          create (stop)-[:STARTED]->(intime_anchor)
          merge (outtime_anchor:Anchor {id: row.subject_id + '-' + outtime.epochSeconds})
              on create
              set outtime_anchor.value = outtime
          create (stop)-[:ENDED]->(outtime_anchor)
      
          // intime and outtime anchors for visit if it is not inpatient
          foreach( ignore in case when (row.hadm_id is null or row.hadm_id = '')  then [1] else [] end |
              merge (vis)-[:STARTED]->(intime_anchor)
              merge (vis)-[:ENDED]->(outtime_anchor)
          )
      
          // create care site local concept
          with row, stop
          match (rs:RefSet {id:1301})
          match (lc:LocalConcept {id: rs.code + '|' + row.careunit})
          create (stopInf:StopInfo:CareUnit:EXISTENT)-[:OF_ITEM]->(lc)
          create (stop)-[:HAS_STOPINF]->(stopInf)
      }

  # 02-admissions.cql
  - url: file:///var/lib/neo4j/import/mimiciv/2.2/hosp/admissions.csv
    mode: sync
    thread_count: 1
    field_separator:
    chunk_size: 5000
    log_step: 20
    cql: |
      WITH $dict.rows as rows UNWIND rows as row
      call {
          with row
          match (vis:Visit {id: row.hadm_id})
          with row, vis
          match (vis)-[:HAS_STOP]->(stop),
                (stop)-[:STARTED]->(startAnc),
                (stop)-[:ENDED]->(endAnc)
          with row, vis, min(startAnc.value) as minTime, max(endAnc.value) as maxTime
          match (visStartAnc:Anchor {id:row.subject_id + "-" + minTime.epochSeconds})
          match (visEndAnc:Anchor {id:row.subject_id + "-" + maxTime.epochSeconds})
          merge (vis)-[:STARTED]->(visStartAnc)
          merge (vis)-[:ENDED]->(visEndAnc)
      
      
          // create discharge location for visit if any
          with row, vis
          match (rs:RefSet {id:1305})
          foreach(ignore in case when row.discharge_location is not null and row.discharge_location <> '' then [1] else [] end |
              merge (lc:LocalConcept {id: rs.code + '|' + row.discharge_location})
                  on create
                  set lc:Item,
                      lc.code = row.discharge_location,
                      lc.name = row.discharge_location,
                      lc.source = "custom::otmv/visinf/discharge_location"
              merge (lc)-[:BELONGS_TO]->(rs)
              create (visInf:VisitInfo:DcLocation:EXISTENT)-[:OF_ITEM]->(lc)
              create (vis)-[:HAS_VISINF]->(visInf)
          )
      
          // creat admitted location for visit if any
          with row, vis
          match (rs:RefSet {id:1304})
          foreach(ignore in case when row.admission_location is not null and row.admission_location <> '' then [1] else [] end |
              merge (lc:LocalConcept {id: rs.code + '|' + row.admission_location})
                  on create
                  set lc:Item,
                      lc.code = row.admission_location,
                      lc.name = row.admission_location,
                      lc.source = "custom::otmv/visinf/admission_location"
              merge (lc)-[:BELONGS_TO]->(rs)
              create (visInf:VisitInfo:AdmLocation:EXISTENT)-[:OF_ITEM]->(lc)
              create (vis)-[:HAS_VISINF]->(visInf)
          )
      
          // create admit type for visit if any
          with row, vis
          match (rs:RefSet {id:1303})
          foreach(ignore in case when row.admission_type is not null and row.admission_type <> '' then [1] else [] end |
              merge (lc:LocalConcept {id: rs.code + '|' + row.admission_type})
                  on create
                  set lc:Item,
                      lc.code = row.admission_type,
                      lc.name = row.admission_type,
                      lc.source = "custom::otmv/visinf/admission_type"
              merge (lc)-[:BELONGS_TO]->(rs)
              create (visInf:VisitInfo:AdmType:EXISTENT)-[:OF_ITEM]->(lc)
              create (vis)-[:HAS_VISINF]->(visInf)
          )
      
          // create admission order for visit if any
          /*with row, vis
          match (prov:Provider {id: row.admit_provider_id})
          create (order:Order {id:'ADM-' + row.hadm_id})
          create (order)-[:ORDERED_BY]->(prov)
          create (vis)-[:HAS_ORDER]->(order)
          create (order)-[:ORDER_FOR]->(admStop)*/
      
          // create order concept
          /*with row, vis, order
          match (rs:RefSet {id:1401})
          merge (lc:LocalConcept {id: rs.code + '|' + "Admission order"})
              on create
              set lc:Item,
                  lc.code = "Admission order",
                  lc.name = "Admission order",
                  lc.source = "custom::otmv/visinf/admission_order"
          merge (lc)-[:BELONGS_TO]->(rs)
          create (order)-[:OF_ITEM]->(lc)*/
      
          // create insurance for visit
          with row, vis
          match (rs:RefSet {id:1204})
          foreach(ignore in case when row.insurance is not null and row.insurance <> '' then [1] else [] end |
              merge (lc:LocalConcept {id: rs.code + '|' + row.insurance})
                  on create
                  set lc:Item,
                      lc.code = row.insurance,
                      lc.name = row.insurance,
                      lc.source = "custom::otmv/visinf/insurance"
              merge (lc)-[:BELONGS_TO]->(rs)
              create (visInf:VisitInfo:Insurance:EXISTENT)-[:OF_ITEM]->(lc)
              create (vis)-[:HAS_VISINF]->(visInf)
          )
      
          // create language for visit
          with row, vis
          match (rs:RefSet {id:1203})
          foreach(ignore in case when row.language is not null and row.language <> '' then [1] else [] end |
              merge (lc:LocalConcept {id: rs.code + '|' + row.language})
                  on create
                  set lc:Item,
                      lc.code = row.language,
                      lc.name = row.language,
                      lc.source = "custom::otmv/visinf/language"
              merge (lc)-[:BELONGS_TO]->(rs)
              create (visInf:VisitInfo:Language:EXISTENT)-[:OF_ITEM]->(lc)
              create (vis)-[:HAS_VISINF]->(visInf)
          )
      
          // create marital status for visit
          with row, vis
          match (rs:RefSet {id:1202})
          foreach(ignore in case when row.marital_status is not null and row.marital_status <> '' then [1] else [] end |
              merge (lc:LocalConcept {id: rs.code + '|' + row.marital_status})
                  on create
                  set lc:Item,
                      lc.code = row.marital_status,
                      lc.name = row.marital_status,
                      lc.source = "custom::otmv/visinf/marital_status"
              merge (lc)-[:BELONGS_TO]->(rs)
              create (visInf:VisitInfo:MaritalStatus:EXISTENT)-[:OF_ITEM]->(lc)
              create (vis)-[:HAS_VISINF]->(visInf)
          )
      
          // create race for visit
          with row, vis
          match (rs:RefSet {id:1201})
          foreach(ignore in case when row.race is not null and row.race <> '' then [1] else [] end |
              merge (lc: LocalConcept {id: rs.code + '|' + row.race})
              on create
              set lc:Item,
                  lc.code = row.race,
                  lc.name = row.race,
                  lc.source = "custom::otmv/visinf/race"
              merge (lc)-[:BELONGS_TO]->(rs)
              create (visInf:VisitInfo:Race:EXISTENT)-[:OF_ITEM]->(lc)
              create (vis)-[:HAS_VISINF]->(visInf)
          )
      }


  
  




