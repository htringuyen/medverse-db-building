server_uri: bolt://localhost:7687
database: medverse
admin_user: snowj
admin_pass: abcd1234
files:
  # 16-datetimeevents-p1.cql
  - url: file:///var/lib/neo4j/import/custom_partitions/datetimeevents_datetimes.csv
    mode: sync
    thread_count: 1
    chunk_size: 5000
    log_step: 200
    cql: |
      WITH $dict.rows as rows UNWIND rows as row
      match (pa:Patient {id:toInteger(row.subject_id)})
      with row,
          datetime({epochseconds: apoc.date.parse(row.charttime, 's', 'yyyy-MM-dd HH:mm:ss')}) - pa.shiftedYears as charttime
      merge (anc:Anchor {id:row.subject_id + '-' + charttime.epochSeconds})
          on create
          set anc.value = charttime
      

  # 16-datetimeevents-p2.cql
  - url: file:///var/lib/neo4j/import/mimiciv/2.2/icu/datetimeevents.csv
    mode: async
    thread_count: 20
    chunk_size: 5000
    log_step: 200
    cql: |
      WITH $dict.rows as rows UNWIND rows as row
      match (pa:Patient {id:toInteger(row.subject_id)})
      match (itemRs:RefSet {id:1901})
      match (unitRs:RefSet {id:2201})
      match (flagRs:RefSet {id:2401})
      with row,
          datetime({epochseconds:apoc.date.parse(row.charttime, 's', 'yyyy-MM-dd HH:mm:ss')}) - pa.shiftedYears as charttime,
          datetime({epochseconds:apoc.date.parse(row.value, 's', 'yyyy-MM-dd HH:mm:ss')}) - pa.shiftedYears as value_time,
          itemRs.code + '|' + row.itemid as item_id,
          unitRs.code + '|' + row.valueuom as unit_id,
          case when row.warning = "1" then flagRs.code + '|' + 'warning' else "UNDEF|ALL" end as flag_id
  
      match (item:LocalConcept {id:item_id})
      match (unit:LocalConcept {id:unit_id})
      match (flag:LocalConcept {id:flag_id})
      match (chartedAnc:Anchor {id:row.subject_id + '-' + charttime.epochSeconds})
      match (vis:Visit {id:row.hadm_id})
  
      with row, charttime, item, unit, flag, chartedAnc, value_time, vis
      create (proc:Procedure:Miscellaneous:DATETIME)
          set proc.valueUnit = unit.value,
              proc.valueTime = value_time,
              proc.valueFlag = case when flag.value <> 0 then flag.value else null end
      create (proc)-[:CHARTED]->(chartedAnc)
      create (proc)-[:OF_ITEM]->(item)
      create (vis)-[:HAS_PROC]->(proc)