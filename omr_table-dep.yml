server_uri: bolt://localhost:7687
database: medverse
admin_user: snowj
admin_pass: abcd1234
files:
  - url: file:///var/lib/neo4j/import/mimiciv/2.2/hosp/omr.csv
    mode: sync
    thread_count: 1
    chunk_size: 5000
    log_step: 100
    cql: |
        WITH $dict.rows as rows UNWIND rows as row
        with row
        match (pa:Patient {id: toInteger(row.subject_id)})-[:HAS_CASE]->(ca)
        create (:Silly1)
        with row, ca,
            datetime(row.chartdate) - pa.shiftedYears as charttime
        //create (:Sillyyyy)
        // with row, ca, charttime
        optional match (ca)-[:HAS_VIS]->(vis),
              (vis)-[:VIS_STARTED]->(startAnc:Anchor),
              (vis)-[:VIS_ENDED]->(endAnc:Anchor)
        where charttime >= datetime({epochSeconds: toInteger(split(startAnc.id, '-')[1])}) and
              charttime <= datetime({epochSeconds: toInteger(split(endAnc.id, '-')[1])})
        create (:Sillyxxx)
        with row, ca, vis, charttime,
            case when row.result_value contains '/' then split(row.result_value, '/') else [row.result_value] end as values,
            case when row.result_value contains '/' then [' Systolic', ' Diastolic'] else [''] end as postfixes
        limit 1
        create (:Silly111)
        with row, ca, vis, charttime, values, postfixes
        unwind range(0, size(values) - 1) as idx
        with row, ca, vis, charttime, toFloat(values[idx]) as valuenum, row.result_name + postfixes[idx] as result_name
        where valuenum is not null
        
        
        
        match (rs:RefSet {id:1601})
        create (:Silly11)
        merge (lc:LocalConcept {id: rs.code + '|' + result_name})
            on create
            set lc.code = result_name,
                lc.name = result_name,
                lc.source = rs.reference
        create (obs:Observation:MiscObs)-[:OF_ITEM]->(lc)
        set obs:NUMERIC,
            obs.valueNum = valuenum
        create (:Silly2)
        with row, ca, vis, charttime, obs
        call {
            with row, vis, obs
            with row, vis, obs
            where vis is not null
            match (vis)-[:VIS_STARTED]->(startAnc:Anchor)
            create (obs)-[:OBS_CHARTED]->(startAnc)
            create (vis)-[:HAS_OBS]->(obs)
        }
    
        with row, ca, vis as vis_dep, charttime, obs,
            row.subject_id + '-' + charttime.epochSeconds as vis_id
        where vis_dep is null
        merge (vis:Visit {id: vis_id})
            on create
            set vis:OUTPATIENT
        merge (ca)-[:HAS_VIS]->(vis)
        create (vis)-[:HAS_OBS]->(obs)
    
        with row, vis, charttime
        merge (startAnc:Anchor {id: row.subject_id + '-' + charttime.epochSeconds})
        merge (endAnc:Anchor {id: row.subject_id + '-' + (charttime.epochSeconds + 86399)})
        merge (vis)-[:VIS_STARTED]->(startAnc)
        merge (vis)-[:VIS_ENDED]->(endAnc)
    













