server_uri: bolt://localhost:7687
database: medverse
admin_user: snowj
admin_pass: abcd1234
files:
  # 09-labevents-p1.cql
  - url: file:///var/lib/neo4j/import/custom_partitions/labevents_datetimes.csv
    mode: sync
    thread_count: 1
    chunk_size: 10000
    log_step: 100
    cql: |
      WITH $dict.rows as rows UNWIND rows as row
      match (pa:Patient {id:toInteger(row.subject_id)})
      with row,
          datetime({epochseconds: apoc.date.parse(row.charttime, 's', 'yyyy-MM-dd HH:mm:ss')}) - pa.shiftedYears as charttime
      merge (anc:Anchor {id:row.subject_id + '-' + charttime.epochSeconds})
          on create
          set anc.value = charttime

  # 09-labevents-p2.cql
  - url: file:///var/lib/neo4j/import/custom_partitions/labevents_specimens.csv
    mode: async
    thread_count: 20
    chunk_size: 5000
    log_step: 200
    cql: |
      WITH $dict.rows as rows UNWIND rows as row
      match (pa:Patient {id: toInteger(row.subject_id)})
      with row,
          datetime( {epochseconds: apoc.date.parse(row.charttime, 's', 'yyyy-MM-dd HH:mm:ss')} ) - pa.shiftedYears as charttime
      // create lab sampling
      match (rs:RefSet {id:1703})
      match (specItem: LocalConcept {id: rs.code + '|' + row.fluid})
      match (chartedAnc:Anchor {id:row.subject_id + '-' + charttime.epochSeconds})
  
      with row, chartedAnc, specItem, charttime
      create (labSamp: LabSampling {specimenId: toInteger(row.specimen_id)})
          set labSamp:EXISTENT:Measurement,
              //labSamp.hadmId = toInteger(row.hadm_id),
              labSamp.subjectId = toInteger(row.subject_id)
      create (labSamp)-[:CHARTED]->(chartedAnc)
      create (labSamp)-[:OF_ITEM]->(specItem)
  
      with row, charttime, labSamp
      // link lab sampling to visit-stop
      match (pa:Patient {id:toInteger(row.subject_id)})-[:HAS_VISIT]->()-[:HAS_STOP]->(stop),
            (stop)-[:STARTED]->(started),
            (stop)-[:ENDED]->(ended)
      where started.value <= charttime < ended.value
      with pa, stop, labSamp
      limit 1
      create (stop)-[:HAS_MEAS]->(labSamp)


post_ingest:
  # 09-labevents-p3.cql
  - |
    match (ls:LabSampling)-[:CHARTED]->(chartedAnc)
    where not exists( ()-[:HAS_MEAS]->(ls) )
    call {
      with ls, chartedAnc
      match (pa:Patient {id:ls.subjectId})
    
      with ls, chartedAnc, pa
      optional match (pa)-[:HAS_VISIT]->()-[:HAS_STOP]->(stop)-[:STARTED]->(startAnc),
                      (stop)-[:ENDED]->(endAnc)
      where chartedAnc.value >= startAnc.value and chartedAnc.value < endAnc.value
    
      with ls, chartedAnc, stop
    
      limit 1 // check point
    
      foreach (ignore in case when stop is not null then [1] else [] end |
        create (stop)-[:HAS_MEAS]->(ls)
      )
    
      with ls, chartedAnc
      where stop is null
      match (pa:Patient {id:ls.subjectId})
    
      with ls, chartedAnc, pa
      // create visit and stop
      merge (vis:Visit {id:ls.subjectId + "-" + chartedAnc.value.epochSeconds})
          on create
          set vis:OUTPATIENT,
              vis.newCreated = true
      merge (stop:Stop {id:ls.subjectId + "-" + chartedAnc.value.epochSeconds})
          on create
          set stop:NonStay
    
      // link to meas
      create (stop)-[:HAS_MEAS]->(ls)
    
      with ls, chartedAnc, vis, stop, pa
      where vis.newCreated is not null
      // create start and end anchors
      match (startAnc:Anchor {id:ls.subjectId + "-" + chartedAnc.value.epochSeconds})
    
      merge (endAnc:Anchor {id:ls.subjectId + "-" + (chartedAnc.value.epochSeconds + 60)})
          on create
          set endAnc.value = chartedAnc.value + duration({seconds: 60})
    
      with ls, vis, stop, startAnc, endAnc, pa
      remove vis.newCreated
      create (pa)-[:HAS_VISIT]->(vis)
      create (vis)-[:HAS_STOP]->(stop)
      create (vis)-[:STARTED]->(startAnc)
      create (vis)-[:ENDED]->(endAnc)
      create (stop)-[:STARTED]->(startAnc)
      create (stop)-[:ENDED]->(endAnc)
    } in transactions of 5000 rows
