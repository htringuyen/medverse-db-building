server_uri: bolt://localhost:7687
database: medverse
admin_user: snowj
admin_pass: abcd1234
files:
  # 10-microbiologyevents-p1.cql
  - url: file:///var/lib/neo4j/import/custom_partitions/microbiologyevents_datetimes.csv
    mode: sync
    thread_count: 1
    chunk_size: 5000
    log_step: 100
    cql: |
      WITH $dict.rows as rows UNWIND rows as row
      with row,
         case when row.charttime is not null and row.charttime <> ''
            then row.charttime
            else row.chartdate
        end as timevalue

      match (pa:Patient {id:toInteger(row.subject_id)})
      with row,
          datetime({epochseconds: apoc.date.parse(timevalue, 's', 'yyyy-MM-dd HH:mm:ss')}) - pa.shiftedYears as charttime
      merge (anc:Anchor {id:row.subject_id + '-' + charttime.epochSeconds})
          on create
          set anc.value = charttime

  # 10-microbiologyevents-p2.cql
  - url: file:///var/lib/neo4j/import/custom_partitions/micro_samplings.csv
    mode: sync
    thread_count: 1
    chunk_size: 5000
    log_step: 100
    cql: |
      WITH $dict.rows as rows UNWIND rows as row
      match (rs:RefSet {id:1710})
      match (lc:LocalConcept {id:rs.code + '|' + row.spec_itemid})
      match (pa:Patient {id:toInteger(row.subject_id)})
  
      with row, lc,
          case when row.charttime is not null and row.charttime <> ''
          then datetime ({epochseconds: apoc.date.parse(row.charttime, 's', 'yyyy-MM-dd HH:mm:ss')}) - pa.shiftedYears
          else datetime ({epochseconds: apoc.date.parse(row.chartdate, 's', 'yyyy-MM-dd HH:mm:ss')}) - pa.shiftedYears
          end as charttime,
          case when row.charttime is not null and row.charttime <> '' then true else false end as has_charttime
      match (chartedAnc:Anchor {id:row.subject_id + '-' + charttime.epochSeconds})
  
      with row, lc, chartedAnc, charttime, has_charttime
      create (ms:MicroSampling {specimenId:toInteger(row.micro_specimen_id)})
          set ms:EXISTENT:Measurement,
              ms.subjectId = toInteger(row.subject_id),
              ms.hasChartTime = has_charttime
      create (ms)-[:OF_ITEM]->(lc)
      create (ms)-[:CHARTED]->(chartedAnc)
  
      with row, ms, charttime
      match (pa:Patient {id:toInteger(row.subject_id)})-[:HAS_VISIT]->()-[:HAS_STOP]->(stop),
            (stop)-[:STARTED]->(startAnc),
            (stop)-[:ENDED]->(endAnc)
      where startAnc.value <= charttime < endAnc.value
      with ms, pa, stop
      limit 1
      create (stop)-[:HAS_MEAS]->(ms)


post_ingest:
  # 10-microbiologyevents-p3.cql
  - |
    match (ms:MicroSampling)-[:CHARTED]->(chartedAnc)
    where not exists (()-[:HAS_MEAS]->(ms))
    call {
        with ms, chartedAnc
        optional match (pa:Patient {id:ms.subjectId})-[:HAS_VISIT]->()-[:HAS_STOP]->(stop),
                       (stop)-[:STARTED]->(startAnc),
                       (stop)-[:ENDED]->(endAnc)
        where (startAnc.value <= chartedAnc.value < endAnc.value)
            or ((not ms.hasChartTime) and ( date({date:startAnc.value}) = date({date:chartedAnc.value})
                        or date({date:endAnc.value}) = date({date:chartedAnc.value}) ) )
    /// ----------------
        with ms, chartedAnc, stop

        limit 1 // check point

        foreach (ignore in case when stop is not null then [1] else [] end |
            create (stop)-[:HAS_MEAS]->(ms)
        )

        with ms, chartedAnc
        where stop is null

        match (pa:Patient {id: ms.subjectId})

        with ms, chartedAnc, pa

        // create visit and stop
        merge (vis:Visit {id:ms.subjectId + "-" + chartedAnc.value.epochSeconds})
          on create
          set vis:OUTPATIENT,
              vis.newCreated = true
        merge (stop:Stop {id:ms.subjectId + "-" + chartedAnc.value.epochSeconds})
            on create
            set stop:NonStay

        // link to meas
        merge (stop)-[:HAS_MEAS]->(ms)

        with ms, chartedAnc, pa, vis, stop
        where vis.newCreated is not null

        // create start and end anchors
        match (startAnc:Anchor {id:ms.subjectId + "-" + chartedAnc.value.epochSeconds})

        merge (endAnc:Anchor {id:ms.subjectId + "-" + (chartedAnc.value.epochSeconds + 60)})
          on create
          set endAnc.value = chartedAnc.value + duration({seconds: 60})

        with ms, vis, stop, startAnc, endAnc, pa

        remove vis.newCreated
        create (pa)-[:HAS_VISIT]->(vis)
        create (vis)-[:HAS_STOP]->(stop)
        create (vis)-[:STARTED]->(startAnc)
        create (vis)-[:ENDED]->(endAnc)
        create (stop)-[:STARTED]->(startAnc)
        create (stop)-[:ENDED]->(endAnc)
    } in transactions of 5000 rows