server_uri: bolt://localhost:7687
database: medverse
admin_user: snowj
admin_pass: abcd1234
files:
  # voc00-VOCABULARY.cql
  - url: file:///var/lib/neo4j/import/vocab-clean/VOCABULARY.csv
    mode: sync
    thread_count: 1
    field_separator: \t
    chunk_size: 5000
    log_step: 1
    cql: |
        WITH $dict.rows as rows UNWIND rows as row
        MERGE (n:Vocabulary {vocabId: row.vocabulary_id})
        ON CREATE
        SET n:Concept,
            n.id = toInteger(row.vocabulary_concept_id),
            n.code = 'N/A',
            n.name = 'N/A',
            n.validStartDate = date(),
            n.validEndDate = date(),
            n.vocabName = row.vocabulary_name,
            n.vocabReference = row.vocabulary_reference,
            n.vocabVersion = row.vocabulary_version
    
  # voc01-DOMAIN.cql
  - url: file:///var/lib/neo4j/import/vocab-clean/DOMAIN.csv
    mode: sync
    thread_count: 1
    field_separator: \t
    chunk_size: 5000
    log_step: 1
    cql: |
        WITH $dict.rows as rows UNWIND rows as row
        MERGE (n:Domain {domainId: row.domain_id})
            ON CREATE
            SET n:Concept,
                n.id = toInteger(row.domain_concept_id),
                n.code = 'N/A',
                n.name = 'N/A',
                n.validStartDate = date(),
                n.validEndDate = date(),
                n.domainName = row.domain_name
        
  # voc02-CONCEPT_CLASS.cql
  - url: file:///var/lib/neo4j/import/vocab-clean/CONCEPT_CLASS.csv
    mode: sync
    thread_count: 1
    field_separator: \t
    chunk_size: 5000
    log_step: 1
    cql: |
        WITH $dict.rows as rows UNWIND rows as row
        MERGE (n:ConceptClass {classId: row.concept_class_id})
        ON CREATE
        SET n:Concept,
            n.id = toInteger(row.concept_class_concept_id),
            n.code = 'N/A',
            n.name = 'N/A',
            n.validStartDate = date(),
            n.validEndDate = date(),
            n.className = row.concept_class_name
        
  # voc03-RELATIONSHIP.cql
  - url: file:///var/lib/neo4j/import/vocab-clean/RELATIONSHIP.csv
    mode: sync
    thread_count: 1
    field_separator: \t
    chunk_size: 5000
    log_step: 1
    cql: |
        WITH $dict.rows as rows UNWIND rows as row
        WITH row,
            CASE WHEN row.is_hierarchical = '1' THEN true ELSE false END AS is_hierarchical,
            CASE WHEN row.defines_ancestry = '1' THEN true ELSE false END AS defines_ancestry
        MERGE (n:Relationship {relId: row.relationship_id})
            ON CREATE
            SET n:Concept,
                n.id = toInteger(row.relationship_concept_id),
                n.code = 'N/A',
                n.name = 'N/A',
                n.validStartDate = date(),
                n.validEndDate = date(),
                n.relName = row.relationship_name,
                n.isHierarchical = is_hierarchical,
                n.definesAncestry = defines_ancestry,
                n.reverseRelId = row.reverse_relationship_id
        
  # voc04-CONCEPT.cql
  - url: file:///var/lib/neo4j/import/vocab-clean/CONCEPT.csv
    mode: sync
    thread_count: 1
    field_separator: \t
    chunk_size: 5000
    log_step: 100
    cql: |
        WITH $dict.rows as rows UNWIND rows as row
        MERGE (c:Concept {id:toInteger(row.concept_id)})
        SET c.name = row.concept_name,
            c.code = row.concept_code,
            c.validStartDate = date(row.valid_start_date),
            c.validEndDate = date(row.valid_end_date)
        FOREACH(ignore IN CASE WHEN row.invalid_reason IS NOT NULL AND row.invalid_reason <> '' THEN [1] ELSE [] END |
            SET c.invalidReason = row.invalid_reason
        )
    
        WITH row, c,
            CASE 
                WHEN row.standard_concept = 'S' THEN "STANDARD"
                WHEN row.standard_concept = 'C' THEN "CLASSIFICATION"
                ELSE "NON_STD" END AS cepType
        CALL apoc.create.addLabels(c, [cepType]) YIELD node
    
        WITH row, c
        MATCH (vocabulary:Vocabulary {vocabId:row.vocabulary_id})
        CREATE (c)-[:OF_VOCAB]->(vocabulary)
    
        WITH row, c
        MATCH (domain:Domain {domainId:row.domain_id})
        CREATE (c)-[:OF_DOMAIN]->(domain)
    
        WITH row, c
        MATCH (class:ConceptClass {classId:row.concept_class_id})
        CREATE (c)-[:OF_CLASS]->(class)

  # voc05-CONCEPT_RELATIONSHIP.cql
  - url: file:///var/lib/neo4j/import/vocab-clean/CONCEPT_RELATIONSHIP.csv
    mode: async
    thread_count: 20
    field_separator: \t
    chunk_size: 5000
    log_step: 200
    cql: |
        WITH $dict.rows as rows UNWIND rows as row
        MATCH (c1:Concept {id:toInteger(row.concept_id_1)}),
              (c2:Concept {id:toInteger(row.concept_id_2)}),
              (refRel:Relationship {relId:row.relationship_id})
        WITH row, c1, c2, refRel,
                case when row.invalidReason is not null and row.invalidReason <> '' then row.invalidReason else null end as invalid_reason
        create (c1)-[r:__RELATES_TO]->(c2)
            set r.refId = refRel.id,
                r.validStartDate = date(row.valid_start_date),
                r.validEndDate = date(row.valid_end_date),
                r.invalidReason = invalid_reason

  # voc06-DRUG_STRENGTH.cql
  - url: file:///var/lib/neo4j/import/vocab-clean/DRUG_STRENGTH.csv
    mode: sync
    thread_count: 1
    field_separator: \t
    chunk_size: 10000
    log_step: 10
    cql: |
        WITH $dict.rows as rows UNWIND rows as row
        CALL {
            WITH row
            WITH row
            WHERE row.drug_concept_id = row.ingredient_concept_id
            MATCH (ingt:Concept {id:toInteger(row.ingredient_concept_id)}),
                (amountUnit:Concept {id:toInteger(row.amount_unit_concept_id)})
            MERGE (ingt)-[:ASSOC_UNIT]->(amountUnit)
        }

        WITH row
        WHERE row.drug_concept_id <> row.ingredient_concept_id

        MATCH (drug: Concept {id:toInteger(row.drug_concept_id)}),
            (ingt: Concept {id:toInteger(row.ingredient_concept_id)})
        WITH row, drug, ingt
        SET drug:AStdDrug
        MERGE (drug)-[:HAS_ING_STR]->(strength:IngredientStrength)
            ON CREATE
            SET strength.boxSize = toInteger(row.box_size),
                strength.validStartDate = date(row.valid_start_date),
                strength.validEndDate = date(row.valid_end_date),
                strength.invalidReason = row.invalid_reason
        MERGE (strength)-[:OF_INGREDIENT]->(ingt)
            ON CREATE
            SET ingt:AStdIngredient

        // set amount unit
        WITH row, strength
        OPTIONAL MATCH (amountUnit:Concept {id:toInteger(row.amount_unit_concept_id)})
        FOREACH(ignore IN CASE WHEN amountUnit IS NOT NULL THEN [1] ELSE [] END |
            set strength.amountValue = toFloat(row.amount_value)
            set strength.amountUnitId = amountUnit.id
            /*MERGE (strength)-[amountRel:HAS_AMOUNT_UNIT]->(amountUnit)
                ON CREATE
                SET strength.amountValue = toFloat(row.amount_value)*/
        )

        // set numerator unit
        WITH row, strength
        OPTIONAL MATCH (numeratorUnit:Concept {id:toInteger(row.numerator_unit_concept_id)})
        FOREACH(ignore IN CASE WHEN numeratorUnit IS NOT NULL THEN [1] ELSE [] END |
            set strength.numeratorValue = toFloat(row.numerator_value)
            set strength.numeratorUnitId = numeratorUnit.id
            /*MERGE (strength)-[numeratorRel:HAS_NUMER_UNIT]->(numeratorUnit)
                ON CREATE
                SET strength.numerValue = toFloat(row.numerator_value)*/
        )

        // set denominator unit
        WITH row, strength
        OPTIONAL MATCH (denominatorUnit:Concept {id:toInteger(row.denominator_unit_concept_id)})
        FOREACH(ignore IN CASE WHEN denominatorUnit IS NOT NULL THEN [1] ELSE [] END |
            set strength.denominatorValue = toFloat(row.denominator_value)
            set strength.denominatorUnitId = denominatorUnit.id
            /*MERGE (strength)-[denominatorRel:HAS_DENOM_UNIT]->(denominatorUnit)
                ON CREATE
                SET strength.denomValue = toFloat(row.denominator_value)*/
        )


  - url: file:///var/lib/neo4j/import/vocab-clean/CONCEPT_SYNONYM.csv
    mode: sync
    thread_count: 1
    field_separator: \t
    chunk_size: 10000
    log_step: 10
    cql: |
        WITH $dict.rows as rows UNWIND rows as row
        MATCH (c:Concept {id:toInteger(row.concept_id)}),
            (l:Concept {id:toInteger(row.language_concept_id)})
        WITH c, l, row
        MERGE (s:Synonym {idText:row.concept_synonym_name})
        MERGE (c)-[:HAS_SYNONYM]->(s)
        MERGE (s)-[:IN_LANGUAGE]->(l)
    

pre_ingest:
#    /* for Concept */
  - create constraint concept_id_key if not exists for (n:Concept) require n.id is node key;
  - create constraint concept_id_type if not exists for (n:Concept) require n.id is ::integer;
  - create constraint concept_code_exists if not exists for (n:Concept) require n.code is not null;
  - create constraint concept_code_type if not exists for (n:Concept) require n.code is ::string;
  - create constraint concept_name_exists if not exists for (n:Concept) require n.name is not null;
  - create constraint concept_name_type if not exists for (n:Concept) require n.name is ::string;
  - create constraint concept_valid_start_date_exists if not exists for (n:Concept) require n.validStartDate is not null;
  - create constraint concept_valid_start_date_type if not exists for (n:Concept) require n.validStartDate is ::date;
  - create constraint concept_valid_end_date_exists if not exists for (n:Concept) require n.validEndDate is not null;
  - create constraint concept_valid_end_date_type if not exists for (n:Concept) require n.validEndDate is ::date;
  - create constraint concept_invalid_reason_type if not exists for (n:Concept) require n.invalidReason is ::string;
    
#    /* for Vocabulary */
  - create constraint vocabulary_vocab_id_key if not exists for (n:Vocabulary) require n.vocabId is node key;
  - create constraint vocabulary_vocab_id_type if not exists for (n:Vocabulary) require n.vocabId is ::string;
  - create constraint vocabulary_vocab_name_exists if not exists for (n:Vocabulary) require n.vocabName is node key;
  - create constraint vocabulary_vocab_name_type if not exists for (n:Vocabulary) require n.vocabName is ::string;
  - create constraint vocabulary_vocab_reference_exists if not exists for (n:Vocabulary) require n.vocabReference is not null;
  - create constraint vocabulary_vocab_reference_type if not exists for (n:Vocabulary) require n.vocabReference is ::string;
  - create constraint vocabulary_vocab_version_type if not exists for (n:Vocabulary) require n.vocabVersion is ::string;
    
    
#    /* for Domain */
  - create constraint domain_domain_id_key if not exists for (n:Domain) require n.domainId is node key;
  - create constraint domain_domain_id_type if not exists for (n:Domain) require n.domainId is ::string;
  - create constraint domain_domain_name_exists if not exists for (n:Domain) require n.domainName is not null;
  - create constraint domain_domain_name_type if not exists for (n:Domain) require n.domainName is ::string;
    
#    /* for Relationship */
  - create constraint relationship_id_key if not exists for (n:Relationship) require n.relId is node key;
  - create constraint relationship_id_type if not exists for (n:Relationship) require n.relId is ::string;
  - create constraint relationship_name_exists if not exists for (n:Relationship) require n.relName is not null;
  - create constraint relationship_name_type if not exists for (n:Relationship) require n.relName is ::string;
  - create constraint relationship_reverse_rel_id_exists if not exists for (n:Relationship) require n.reverseRelId is not null;
  - create constraint relationship_reverse_rel_id_type if not exists for (n:Relationship) require n.reverseRelId is ::string;
  - create constraint relationship_is_hierarchical_exists if not exists for (n:Relationship) require n.isHierarchical is not null;
  - create constraint relationship_is_hierarchical_type if not exists for (n:Relationship) require n.isHierarchical is ::boolean;
  - create constraint relationship_defines_ancestry_exists if not exists for (n:Relationship) require n.definesAncestry is not null;
  - create constraint relationship_defines_ancestry_type if not exists for (n:Relationship) require n.definesAncestry is ::boolean;
    
#    /* for ConceptClass */
  - create constraint concept_class_id_key if not exists for (n:ConceptClass) require n.classId is node key;
  - create constraint concept_class_id_type if not exists for (n:ConceptClass) require n.classId is ::string;
  - create constraint concept_class_name_exists if not exists for (n:ConceptClass) require n.className is not null;
  - create constraint concept_class_name_type if not exists for (n:ConceptClass) require n.className is ::string;
    
    
#    /* for ONTO_REL */
  - create constraint __relates_to_ref_id_exists if not exists for ()-[r:__RELATES_TO]->() require r.refId is not null;
  - create constraint __relates_to_ref_id_type if not exists for ()-[r:__RELATES_TO]->() require r.refId is ::integer;
  - create constraint __relates_to_valid_start_date_exists if not exists for ()-[r:__RELATES_TO]->() require r.validStartDate is not null;
  - create constraint __relates_to_valid_start_date_type if not exists for ()-[r:__RELATES_TO]->() require r.validStartDate is ::date;
  - create constraint __relates_to_valid_end_date_exists if not exists for ()-[r:__RELATES_TO]->() require r.validEndDate is not null;
  - create constraint __relates_to_valid_end_date_type if not exists for ()-[r:__RELATES_TO]->() require r.validEndDate is ::date;
  - create constraint __relates_to_invalid_reason_type if not exists for ()-[r:__RELATES_TO]->() require r.invalidReason is ::string;
    
#    /* for Synonym */
  - create constraint synonym_id_text_key if not exists for (n:Synonym) require n.idText is node key;
  - create constraint synonym_id_text_type if not exists for (n:Synonym) require n.idText is ::string;

#  /* for IngredientStrength */
  - create constraint ingredient_strength_amount_value_type if not exists for (n:IngredientStrength) require n.amountValue is ::float;
  - create constraint ingredient_strength_amount_unit_id_type if not exists for (n:IngredientStrength) require n.amountUnitId is ::integer;
  - create constraint ingredient_strength_denominator_value_type if not exists for (n:IngredientStrength) require n.denominatorValue is ::float;
  - create constraint ingredient_strength_denominator_unit_id_type if not exists for (n:IngredientStrength) require n.denominatorUnitId is ::integer;
  - create constraint ingredient_strength_numerator_value_type if not exists for (n:IngredientStrength) require n.numeratorValue is ::float;
  - create constraint ingredient_strength_numerator_unit_id_type if not exists for (n:IngredientStrength) require n.numeratorUnitId is ::integer;
  - create constraint ingredient_strength_valid_start_date_exists if not exists for (n:IngredientStrength) require n.validStartDate is not null;
  - create constraint ingredient_strength_valid_start_date_type if not exists for (n:IngredientStrength) require n.validStartDate is ::date;
  - create constraint ingredient_strength_valid_end_date_exists if not exists for (n:IngredientStrength) require n.validEndDate is not null;
  - create constraint ingredient_strength_valid_end_date_type if not exists for (n:IngredientStrength) require n.validEndDate is ::date;
  - create constraint ingredient_strength_invalid_reason_type if not exists for (n:IngredientStrength) require n.invalidReason is ::string;
  - create constraint ingredient_box_size_type if not exists for (n:IngredientStrength) require n.boxSize is ::integer;










































